import 'package:flutter/material.dart';
import 'package:gong_mu_talk/core/utils/number_formatter.dart';
import 'package:gong_mu_talk/features/calculator/domain/entities/pension_estimate.dart';
import 'package:gong_mu_talk/features/calculator/domain/entities/after_tax_pension.dart';
import 'package:gong_mu_talk/features/calculator/presentation/views/pension_detail_page.dart';

/// Ìá¥ÏßÅ ÌõÑ Ïó∞Í∏à Ïã§ÏàòÎ†πÏï° Ïπ¥Îìú (ÏÑ∏Ï†Ñ + ÏÑ∏ÌõÑ ÌÜµÌï©)
class PensionNetIncomeCard extends StatelessWidget {
  final bool isLocked;
  final PensionEstimate? pensionEstimate;
  final AfterTaxPension? afterTaxPension;

  const PensionNetIncomeCard({
    super.key,
    required this.isLocked,
    this.pensionEstimate,
    this.afterTaxPension,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 2,
      child: InkWell(
        onTap: isLocked || pensionEstimate == null
            ? null
            : () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => PensionDetailPage(
                      pensionEstimate: pensionEstimate!,
                      afterTaxPension: afterTaxPension,
                    ),
                  ),
                );
              },
        borderRadius: BorderRadius.circular(12),
        child: Opacity(
          opacity: isLocked ? 0.5 : 1.0,
          child: Padding(
            padding: const EdgeInsets.all(20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Ìó§Îçî
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: isLocked
                            ? Colors.grey.withValues(alpha: 0.1)
                            : Colors.green.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Icon(
                        Icons.savings,
                        size: 28,
                        color: isLocked ? Colors.grey : Colors.green,
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        'Ìá¥ÏßÅ ÌõÑ Ïó∞Í∏à Ïã§ÏàòÎ†πÏï°',
                        style: Theme.of(context).textTheme.titleLarge?.copyWith(
                              fontWeight: FontWeight.bold,
                            ),
                      ),
                    ),
                    if (isLocked)
                      const Icon(Icons.lock, color: Colors.grey)
                    else
                      const Icon(Icons.arrow_forward_ios, size: 16),
                  ],
                ),

                const SizedBox(height: 20),

                if (isLocked)
                  // Ïû†Í∏à ÏÉÅÌÉú
                  Center(
                    child: Column(
                      children: [
                        Icon(
                          Icons.lock_outline,
                          size: 48,
                          color: Colors.grey[400],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Ï†ïÎ≥¥ ÏûÖÎ†• ÌõÑ Ïù¥Ïö© Í∞ÄÎä•',
                          style: TextStyle(
                            color: Colors.grey[600],
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ),
                  )
                else if (pensionEstimate != null && afterTaxPension != null)
                  // ÌôúÏÑ±Ìôî ÏÉÅÌÉú
                  Column(
                    children: [
                      // Î©îÏù∏ Í∞ïÏ°∞: ÏÑ∏ÌõÑ Ïõî Ïã§ÏàòÎ†πÏï°
                      Container(
                        width: double.infinity,
                        padding: const EdgeInsets.all(20),
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [
                              Colors.green.withValues(alpha: 0.2),
                              Colors.green.withValues(alpha: 0.1),
                            ],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(
                            color: Colors.green.withValues(alpha: 0.4),
                            width: 2,
                          ),
                        ),
                        child: Column(
                          children: [
                            Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  Icons.check_circle,
                                  color: Colors.green[800],
                                  size: 24,
                                ),
                                const SizedBox(width: 8),
                                Text(
                                  'Ïõî Ïã§ÏàòÎ†πÏï° (ÏÑ∏ÌõÑ)',
                                  style: Theme.of(context)
                                      .textTheme
                                      .titleMedium
                                      ?.copyWith(
                                        color: Colors.green[900],
                                        fontWeight: FontWeight.w600,
                                      ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 12),
                            Text(
                              NumberFormatter.formatCurrency(
                                afterTaxPension!.monthlyPensionAfterTax,
                              ),
                              style: Theme.of(context)
                                  .textTheme
                                  .headlineLarge
                                  ?.copyWith(
                                    fontWeight: FontWeight.bold,
                                    color: Colors.green[900],
                                  ),
                            ),
                          ],
                        ),
                      ),

                      const SizedBox(height: 20),

                      // ÏàòÎ†π Í∏∞Í∞Ñ Î∞è Ï¥ùÏï°
                      _buildInfoRow(
                        context,
                        'üìÖ ÏàòÎ†π Í∏∞Í∞Ñ',
                        '${pensionEstimate!.retirementAge}ÏÑ∏~${pensionEstimate!.lifeExpectancy}ÏÑ∏ (${pensionEstimate!.receivingYears}ÎÖÑ)',
                      ),

                      const SizedBox(height: 12),

                      _buildInfoRow(
                        context,
                        'üí∞ Ï¥ù ÏàòÎ†π ÏòàÏÉÅÏï°',
                        NumberFormatter.formatCurrency(
                          pensionEstimate!.totalPension,
                        ),
                        isHighlight: true,
                      ),

                      const SizedBox(height: 20),

                      // ÏÉÅÏÑ∏ Ï†ïÎ≥¥ (Expandable)
                      ExpansionTile(
                        tilePadding: EdgeInsets.zero,
                        title: Row(
                          children: [
                            Icon(
                              Icons.list_alt,
                              size: 20,
                              color: Colors.grey[700],
                            ),
                            const SizedBox(width: 8),
                            Text(
                              'ÏÑ∏Ï†Ñ/Í≥µÏ†ú ÏÉÅÏÑ∏ Î≥¥Í∏∞',
                              style: Theme.of(context)
                                  .textTheme
                                  .bodyMedium
                                  ?.copyWith(
                                    color: Colors.grey[800],
                                    fontWeight: FontWeight.w600,
                                  ),
                            ),
                          ],
                        ),
                        children: [
                          Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: Colors.grey.withValues(alpha: 0.05),
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Column(
                              children: [
                                // ÏÑ∏Ï†Ñ Ïó∞Í∏à
                                _buildDetailRow(
                                  context,
                                  'ÏÑ∏Ï†Ñ Ïõî Ïó∞Í∏àÏï°',
                                  NumberFormatter.formatCurrency(
                                    afterTaxPension!.monthlyPensionBeforeTax,
                                  ),
                                ),

                                const SizedBox(height: 12),
                                const Divider(height: 1),
                                const SizedBox(height: 12),

                                // Í≥µÏ†ú Ìï≠Î™©
                                Text(
                                  'Í≥µÏ†ú ÎÇ¥Ïó≠',
                                  style: Theme.of(context)
                                      .textTheme
                                      .bodySmall
                                      ?.copyWith(
                                        color: Colors.grey[600],
                                        fontWeight: FontWeight.w500,
                                      ),
                                ),
                                const SizedBox(height: 8),

                                _buildDeductionRow(
                                  context,
                                  'ÏÜåÎìùÏÑ∏',
                                  afterTaxPension!.incomeTax,
                                ),
                                const SizedBox(height: 4),
                                _buildDeductionRow(
                                  context,
                                  'ÏßÄÎ∞©ÏÑ∏',
                                  afterTaxPension!.localTax,
                                ),
                                const SizedBox(height: 4),
                                _buildDeductionRow(
                                  context,
                                  'Í±¥Í∞ïÎ≥¥Ìóò',
                                  afterTaxPension!.healthInsurance,
                                ),
                                const SizedBox(height: 4),
                                _buildDeductionRow(
                                  context,
                                  'Ïû•Í∏∞ÏöîÏñëÎ≥¥Ìóò',
                                  afterTaxPension!.longTermCareInsurance,
                                ),

                                const SizedBox(height: 12),
                                const Divider(height: 1),
                                const SizedBox(height: 12),

                                // Ï¥ù Í≥µÏ†úÏï°
                                Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    Text(
                                      'Ï¥ù Í≥µÏ†úÏï° (${afterTaxPension!.deductionRate.toStringAsFixed(1)}%)',
                                      style: Theme.of(context)
                                          .textTheme
                                          .bodyMedium
                                          ?.copyWith(
                                            fontWeight: FontWeight.w600,
                                          ),
                                    ),
                                    Text(
                                      '- ${NumberFormatter.formatCurrency(afterTaxPension!.totalDeductions)}',
                                      style: Theme.of(context)
                                          .textTheme
                                          .bodyMedium
                                          ?.copyWith(
                                            fontWeight: FontWeight.bold,
                                            color: Colors.red[700],
                                          ),
                                    ),
                                  ],
                                ),

                                const SizedBox(height: 12),

                                // Ïó∞Í∞Ñ Ïã§ÏàòÎ†πÏï°
                                _buildDetailRow(
                                  context,
                                  'Ïó∞Í∞Ñ Ïã§ÏàòÎ†πÏï° (13Í∞úÏõî)',
                                  NumberFormatter.formatCurrency(
                                    afterTaxPension!.annualPensionAfterTax,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // Ïó∞Í∏à Í≥µÎ∞± Í≤ΩÍ≥† (62ÏÑ∏ Ï†ïÎÖÑÏù∏ Í≤ΩÏö∞)
                      if (pensionEstimate!.retirementAge == 62)
                        _buildPensionGapWarning(context),

                      // ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Î≤ÑÌäº
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton.icon(
                          onPressed: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => PensionDetailPage(
                                  pensionEstimate: pensionEstimate!,
                                  afterTaxPension: afterTaxPension,
                                ),
                              ),
                            );
                          },
                          icon: const Icon(Icons.analytics, size: 18),
                          label: const Text('Ïó∞Î†πÎ≥Ñ ÏãúÎÆ¨Î†àÏù¥ÏÖò'),
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(vertical: 12),
                          ),
                        ),
                      ),
                    ],
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildInfoRow(
    BuildContext context,
    String label,
    String value, {
    bool isHighlight = false,
  }) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: isHighlight ? Colors.green[900] : Colors.grey[700],
                fontWeight: isHighlight ? FontWeight.w600 : FontWeight.normal,
              ),
        ),
        Text(
          value,
          style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.bold,
                color: isHighlight ? Colors.green[800] : Colors.green[700],
              ),
        ),
      ],
    );
  }

  Widget _buildDetailRow(BuildContext context, String label, String value) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Colors.grey[700],
              ),
        ),
        Text(
          value,
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w600,
                color: Colors.grey[900],
              ),
        ),
      ],
    );
  }

  Widget _buildDeductionRow(BuildContext context, String label, int amount) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          '  - $label',
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Colors.grey[600],
              ),
        ),
        Text(
          '- ${NumberFormatter.formatCurrency(amount)}',
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: Colors.red[600],
              ),
        ),
      ],
    );
  }

  Widget _buildPensionGapWarning(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.orange.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: Colors.orange.withValues(alpha: 0.3),
        ),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(
            Icons.warning_amber_rounded,
            size: 20,
            color: Colors.orange[700],
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Ïó∞Í∏à Í≥µÎ∞± Ï£ºÏùò',
                  style: TextStyle(
                    fontSize: 13,
                    fontWeight: FontWeight.bold,
                    color: Colors.orange[900],
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  '62~65ÏÑ∏ ÏÇ¨Ïù¥ 3ÎÖÑÍ∞Ñ Ïó∞Í∏à ÏàòÎ†π Î∂àÍ∞Ä',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.orange[800],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
