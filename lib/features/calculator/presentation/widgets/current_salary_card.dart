import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:gong_mu_talk/core/theme/app_color_extension.dart';
import 'package:gong_mu_talk/core/utils/number_formatter.dart';
import 'package:gong_mu_talk/features/calculator/domain/entities/monthly_net_income.dart';
import 'package:gong_mu_talk/features/calculator/domain/entities/monthly_salary_detail.dart';
import 'package:gong_mu_talk/features/calculator/domain/entities/teacher_profile.dart';
import 'package:gong_mu_talk/features/calculator/presentation/views/salary_analysis_page.dart';
import 'package:gong_mu_talk/features/calculator/domain/entities/lifetime_salary.dart';

/// ÌòÑÏû¨ Í∏âÏó¨ Ïπ¥Îìú (Ïû¨ÏßÅ Ï§ë)
///
/// ÏõîÎ≥Ñ Ïã§ÏàòÎ†πÏï° Î∂ÑÏÑù Ïπ¥ÎìúÎ•º Í∞úÏÑ†ÌïòÏó¨ ÏÇ¨Ïö©ÏûêÏùò ÌòÑÏû¨ Í∏âÏó¨Î•º Í∞ïÏ°∞
class CurrentSalaryCard extends StatelessWidget {
  final bool isLocked;
  final List<MonthlyNetIncome>? monthlyBreakdown;
  final LifetimeSalary? lifetimeSalary;
  final TeacherProfile? profile;
  final String? nickname;

  const CurrentSalaryCard({
    super.key,
    required this.isLocked,
    this.monthlyBreakdown,
    this.lifetimeSalary,
    this.profile,
    this.nickname,
  });

  @override
  Widget build(BuildContext context) {
    // ÌèâÍ∑† Í≥ÑÏÇ∞ - ÏÑ∏Ï†Ñ
    final avgGrossSalary = monthlyBreakdown != null && monthlyBreakdown!.isNotEmpty
        ? (monthlyBreakdown!.map((m) => m.grossSalary).reduce((a, b) => a + b) /
                  monthlyBreakdown!.length)
              .round()
        : 0;

    // ÌèâÍ∑† Í≥ÑÏÇ∞ - ÏÑ∏ÌõÑ
    final avgNetIncome = monthlyBreakdown != null && monthlyBreakdown!.isNotEmpty
        ? (monthlyBreakdown!.map((m) => m.netIncome).reduce((a, b) => a + b) /
                  monthlyBreakdown!.length)
              .round()
        : 0;

    // Ïó∞Í∞Ñ Í≥ÑÏÇ∞ - ÏÑ∏Ï†Ñ
    final annualGrossSalary = monthlyBreakdown != null && monthlyBreakdown!.isNotEmpty
        ? monthlyBreakdown!.map((m) => m.grossSalary).reduce((a, b) => a + b)
        : 0;

    // Ïó∞Í∞Ñ Í≥ÑÏÇ∞ - ÏÑ∏ÌõÑ
    final annualNetIncome = monthlyBreakdown != null && monthlyBreakdown!.isNotEmpty
        ? monthlyBreakdown!.map((m) => m.netIncome).reduce((a, b) => a + b)
        : 0;

    return Card(
      elevation: 2,
      child: Opacity(
        opacity: isLocked ? 0.5 : 1.0,
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (isLocked)
                // Ïû†Í∏à ÏÉÅÌÉú
                Center(
                  child: Column(
                    children: [
                      Icon(
                        Icons.lock_outline,
                        size: 48,
                        color: Theme.of(context).colorScheme.outline,
                      ),
                      const Gap(8),
                      Text(
                        'Ï†ïÎ≥¥ ÏûÖÎ†• ÌõÑ Ïù¥Ïö© Í∞ÄÎä•',
                        style: TextStyle(
                          color: Theme.of(context).colorScheme.onSurfaceVariant,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                )
              else if (monthlyBreakdown != null && monthlyBreakdown!.isNotEmpty)
                // ÌôúÏÑ±Ìôî ÏÉÅÌÉú
                Column(
                  children: [
                    // Î©îÏù∏ Í∞ïÏ°∞: Ïõî ÌèâÍ∑† Í∏âÏó¨
                    Container(
                      width: double.infinity,
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: context.appColors.info.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: context.appColors.info.withValues(alpha: 0.3),
                          width: 1,
                        ),
                      ),
                      child: Column(
                        children: [
                          Text(
                            'üóìÔ∏è Ïõî ÌèâÍ∑† Í∏âÏó¨',
                            style: Theme.of(context).textTheme.titleMedium?.copyWith(
                              color: context.appColors.info,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const Gap(12),
                          // ÏÑ∏Ï†Ñ
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                'ÏÑ∏Ï†Ñ',
                                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                                  color: Theme.of(context).colorScheme.onSurfaceVariant,
                                ),
                              ),
                              Text(
                                NumberFormatter.formatCurrency(avgGrossSalary),
                                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.w600,
                                  color: Theme.of(context).colorScheme.onSurfaceVariant,
                                ),
                              ),
                            ],
                          ),
                          const Gap(8),
                          // Ïã§ÏàòÎ†πÏï° (Í∞ïÏ°∞)
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                'Ïã§ÏàòÎ†π',
                                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                  color: context.appColors.info,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                              Text(
                                NumberFormatter.formatCurrency(avgNetIncome),
                                style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                                  fontWeight: FontWeight.bold,
                                  color: context.appColors.info,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),

                    const Gap(12),

                    // Ïó∞Î¥â
                    Container(
                      width: double.infinity,
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: context.appColors.info.withValues(alpha: 0.1),
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: context.appColors.info.withValues(alpha: 0.3),
                          width: 1,
                        ),
                      ),
                      child: Column(
                        children: [
                          Text(
                            'üìà Ïó∞Î¥â',
                            style: Theme.of(context).textTheme.titleMedium?.copyWith(
                              color: context.appColors.info,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                          const Gap(12),
                          // ÏÑ∏Ï†Ñ
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                'ÏÑ∏Ï†Ñ',
                                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                                  color: Theme.of(context).colorScheme.onSurfaceVariant,
                                ),
                              ),
                              Text(
                                NumberFormatter.formatCurrency(annualGrossSalary),
                                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.w600,
                                  color: Theme.of(context).colorScheme.onSurfaceVariant,
                                ),
                              ),
                            ],
                          ),
                          const Gap(8),
                          // Ïã§ÏàòÎ†πÏï° (Í∞ïÏ°∞)
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                'Ïã§ÏàòÎ†π',
                                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                  color: context.appColors.info,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                              Text(
                                NumberFormatter.formatCurrency(annualNetIncome),
                                style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                                  fontWeight: FontWeight.bold,
                                  color: context.appColors.info,
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),

                    const Gap(20),

                    // Ïï°ÏÖò Î≤ÑÌäº (Î™®Îì† Î†àÎ≤® Ï†ëÍ∑º Í∞ÄÎä•, ÌéòÏù¥ÏßÄ ÎÇ¥Î∂ÄÏóêÏÑú Î∏îÎü¨ Ï≤òÎ¶¨)
                    SizedBox(
                      width: double.infinity,
                      child: ElevatedButton.icon(
                        onPressed: lifetimeSalary != null
                            ? () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => SalaryAnalysisPage(
                                      lifetimeSalary: lifetimeSalary!,
                                      monthlyBreakdown: monthlyBreakdown,
                                      profile: profile,
                                      nickname: nickname,
                                    ),
                                  ),
                                );
                              }
                            : null,
                        icon: const Icon(Icons.analytics, size: 18),
                        label: const Text('ÏÉÅÏÑ∏ Î∂ÑÏÑù'),
                        style: ElevatedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 12),
                        ),
                      ),
                    ),
                  ],
                ),
            ],
          ),
        ),
      ),
    );
  }
}

/// MonthlyNetIncomeÏùÑ MonthlySalaryDetailÎ°ú Î≥ÄÌôòÌïòÎäî ÌôïÏû• Î©îÏÑúÎìú
extension MonthlyNetIncomeExtension on MonthlyNetIncome {
  MonthlySalaryDetail toMonthlySalaryDetail() {
    // MonthlyNetIncomeÏùÄ Ïã§ÏàòÎ†πÏï° Ï§ëÏã¨, MonthlySalaryDetailÏùÄ ÏàòÎãπ Ìï≠Î™© Ï§ëÏã¨
    // Ïó¨Í∏∞ÏÑúÎäî Í∞ÑÎã®Ìûà Îß§Ìïë (Ïã§Ï†úÎ°úÎäî UseCaseÏóêÏÑú Í≥ÑÏÇ∞ÎêòÏñ¥Ïïº Ìï®)
    return MonthlySalaryDetail(
      month: month,
      baseSalary: baseSalary,
      teachingAllowance: 0, // MonthlyNetIncomeÏóêÎäî ÏÑ∏Î∂Ä ÏàòÎãπÏù¥ ÏóÜÏúºÎØÄÎ°ú 0
      familyAllowance: 0,
      researchAllowance: 0,
      longevityBonus: longevityBonus,
      longevityMonthly: 0,
      grossSalary: grossSalary,
    );
  }
}
