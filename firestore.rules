rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function hasOnlyKeys(data, keys) {
      return data.keys().hasOnly(keys);
    }

    function hasAllKeys(data, keys) {
      return data.keys().hasAll(keys);
    }

    function notificationAllowedKeys() {
      return [
        'type',
        'title',
        'body',
        'payload',
        'createdAt',
        'delivered',
        'deliveredAt',
        'read'
      ];
    }

    function isValidNotificationCreate(data) {
      return hasOnlyKeys(data, notificationAllowedKeys()) &&
        hasAllKeys(data, ['type', 'title', 'body', 'createdAt', 'delivered', 'read']) &&
        data.type is string &&
        data.title is string &&
        data.body is string &&
        (data.payload == null || data.payload is map) &&
        data.createdAt is timestamp &&
        data.delivered == false &&
        data.read == false &&
        (!data.keys().hasAny(['deliveredAt']) || data.deliveredAt == null);
    }

    function isValidNotificationUpdate(newData, existingData) {
      return hasOnlyKeys(newData, notificationAllowedKeys()) &&
        newData.type == existingData.type &&
        newData.title == existingData.title &&
        newData.body == existingData.body &&
        newData.payload == existingData.payload &&
        newData.createdAt == existingData.createdAt &&
        (newData.delivered == existingData.delivered ||
          (existingData.delivered == false && newData.delivered == true)) &&
        (newData.read == existingData.read ||
          (existingData.read == false && newData.read == true)) &&
        (newData.delivered is bool) &&
        (newData.read is bool) &&
        (newData.deliveredAt == existingData.deliveredAt ||
          (newData.deliveredAt == null && newData.delivered == false) ||
          (newData.deliveredAt is timestamp && newData.delivered == true));
    }

    function isTimestampOrServer(value) {
      return value is timestamp || value == request.time;
    }

    function isValidPaystubClientWrite(data, userId) {
      return hasOnlyKeys(data, [
          'status',
          'uploadedAt',
          'updatedAt',
          'detectedTrack',
          'detectedKeywords',
          'errorMessage',
          'storagePath',
          'originalFileName'
        ]) &&
        hasAllKeys(data, [
          'status',
          'uploadedAt',
          'updatedAt',
          'detectedKeywords',
          'storagePath',
          'originalFileName'
        ]) &&
        data.status == 'processing' &&
        data.storagePath is string &&
        data.storagePath.matches('^paystub_uploads/' + userId + '/[A-Za-z0-9._-]+$') &&
        data.originalFileName is string &&
        data.originalFileName.size() > 0 &&
        (data.detectedTrack == null) &&
        (data.errorMessage == null) &&
        (data.detectedKeywords is list) &&
        isTimestampOrServer(data.uploadedAt) &&
        isTimestampOrServer(data.updatedAt);
    }

    match /users/{userId} {
      allow get, list, read: if isSignedIn();
      allow create, update: if isOwner(userId);
      allow delete: if isOwner(userId);

      match /badges/{badgeId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isOwner(userId);
      }

      match /matching_likes/{targetUid} {
        allow read: if isOwner(userId);
        allow create, update, delete: if isOwner(userId);
      }

      match /matching_inbox/{senderUid} {
        allow read: if isOwner(userId);
        allow create, update, delete: if isSignedIn() && request.auth.uid == senderUid;
      }

      match /matching_meta/{docId} {
        allow read: if isOwner(userId);
        allow create, update, delete: if isOwner(userId);
      }

      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow create: if isSignedIn() &&
          isValidNotificationCreate(request.resource.data);
        allow update: if isOwner(userId) &&
          isValidNotificationUpdate(request.resource.data, resource.data);
        allow delete: if false;
      }

      match /verifications/{verificationId} {
        allow read: if isOwner(userId);
        allow create, update: if isOwner(userId) &&
          verificationId == 'paystub' &&
          isValidPaystubClientWrite(request.resource.data, userId);
        allow delete: if false;
      }

      match /bookmarks/{postId} {
        allow read: if isOwner(userId);
        allow create, update, delete: if isOwner(userId);
      }
    }

    match /handles/{handle} {
      allow get, list, read: if isSignedIn();
      allow create: if isSignedIn() &&
        request.resource.data.keys().hasOnly(['uid']) &&
        request.resource.data.uid == request.auth.uid;
      allow update, delete: if false;
    }

    match /matches/{matchId} {
      allow read: if isSignedIn() &&
        (resource.data.userA == request.auth.uid || resource.data.userB == request.auth.uid);
      allow create, update: if isSignedIn() &&
        (request.resource.data.userA == request.auth.uid || request.resource.data.userB == request.auth.uid);
      allow delete: if isSignedIn() &&
        (resource.data.userA == request.auth.uid || resource.data.userB == request.auth.uid);
    }

    match /government_email_index/{docId} {
      allow get, list, read: if isSignedIn();
      allow create, update: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    match /government_email_aliases/{docId} {
      allow get, list, read: if isSignedIn();
      allow create, update: if isSignedIn() &&
        request.resource.data.userId == request.auth.uid;
      allow delete: if false;
    }

    match /posts/{postId} {
      allow get, list, read: if isSignedIn();
      allow create, update: if isSignedIn();
      allow delete: if false;

      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn();
        allow delete: if false;
      }

      match /comment_likes/{docId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isSignedIn();
      }
    }

    match /likes/{docId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    match /post_counters/{postId} {
      match /shards/{shardId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isSignedIn();
      }
    }

    match /boards/{boardId} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    match /search_suggestions/{token} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
      allow delete: if false;
    }

    match /reports/{reportId} {
      allow read: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}
